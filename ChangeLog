*   2014-12-15

    每个server会链接到两个 redis instance
    一个就是一直在用的，现在这个只用作cache
    另一个是有持久化配置的，保存一些需要持久化的数据

    上线的时候需要启动新的redis-server，并且执行下面的命令把数据从以前的redis instance移动到新的redis instance
    redis-cli --raw -p PORT dump KEY | head -c -1 | redis-cli -x -p PORT restore KEY 0

    然后删除 redis_persistence 的 cronjob,
    并写删除 mongodb 中的 redis_persistence: db.redis_persistence.drop()

    删除 crontab， 现在使用uwsgi自己的cron系统


    此外中途有大量修改没有记录，大概有这些

    - HUB 的mysql表中修改package

*   2014-07-9

    去掉redis_client_two, 全部用redis_client
    timerush 中的配置 也用 redis db 0

    在 hub 上添加 production， hub 要 syncdb, 并且执行 loadconfig store


*   2014-07-06

    每个server用单独的mongodb
    （可以是单独运行的一个mongodb，或者是同一个mongodb中的不同db）

    所以 2014-07-02 中关于 document_ids 的修改作废。
    # TODO 合服


*   2014-07-02

    架构更改
    去掉dispatch. server-list, register 会直接达到hub，其他请求会达到各自server，
    然后通过api与hub交互

    sanguo_hub 表删除server, server_node, django_admin_log表，并重新syncdb

    由于没有了 dispatch， 要重新规划端口

    每个server单独一个目录，不同的配置，单独起一个web server
    现在不同的server链接同一个mongodb 中的不同db

    但 document_ids （用来产生唯一ID） 不同的server还是需要同一个db （sanguo_unique_ids， 写死在代码中）
    所以要注意mongodb中的修改

    > use sanguo_unique_ids
    switched to db sanguo_unique_ids
    > db.ids.insert({_id: 'equipment', 'id': NUMBER})
    > db.ids.insert({_id: 'charhero', 'id': NUMBER})
